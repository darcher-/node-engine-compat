{
  "errors": {
    "readParseDependencyPackageJson": {
      "title": "⚠️ Warning: Could not read or parse package.json for dependency \"{depName}\".",
      "details": "  Error details: {errorMessage}",
      "causes": [
        "  Possible causes:",
        "    - The dependency \"{depName}\" might not be installed correctly. Try running 'npm install' or 'yarn install'.",
        "    - The package.json file at \"{depPath}\" might be corrupted or malformed."
      ]
    },
    "readParseRootPackageJson": {
      "title": "❌ Error: Could not read or parse the root package.json for your project.",
      "path": "  Path checked: {projectPkgPath}",
      "details": "  Error details: {errorMessage}",
      "solutions": [
        "  Possible solutions:",
        "    - Ensure you are running this script from the root directory of your Node.js project.",
        "    - Check if a 'package.json' file exists at this location and is not empty.",
        "    - Validate that your 'package.json' is a valid JSON file (e.g., check for syntax errors, trailing commas)."
      ]
    },
    "versionConflict": {
      "title": "❌ Error: Incompatible Node.js version requirements found across your project and its dependencies.",
      "minRequired": "  Combined minimum Node.js version required: {globalMin}",
      "maxAllowed": "  Combined maximum Node.js version allowed: {globalMax}",
      "conflictExplanation": "  This conflict (min {globalMin} > max {globalMax}) means no single Node.js version can satisfy all declared 'engines.node' constraints.",
      "solutions": [
        "  Possible ways to resolve this:",
        "    1. Examine your project's 'package.json' and the 'package.json' files of its direct dependencies.",
        "       Look for their 'engines.node' fields to identify the sources of the conflicting versions.",
        "    2. Update dependencies: Newer versions of packages might have broader or more compatible Node.js version requirements.",
        "    3. Adjust your project's 'engines.node' in its 'package.json' if it's overly restrictive or conflicts with essential dependencies.",
        "    4. If a specific dependency is problematic, check its issue tracker for known compatibility problems or consider alternatives."
      ]
    },
    "invalidRangeString": {
      "title": "⚠️ Warning: Could not parse the Node.js version range string \"{range}\".",
      "details": "  This range string was found in an 'engines.node' field but could not be fully understood.",
      "causes": [
        "  Possible causes:",
        "    - The string might contain unsupported operators or syntax.",
        "    - There might be a typo in the version range."
      ],
      "solutions": [
        "  Possible solutions:",
        "    - Please check the 'engines.node' field for the package associated with this range.",
        "    - Ensure the range string adheres to standard semver range syntax (e.g., '>=14.0.0', '^16.0.0 || >=18.0.0')."
      ]
    },
    "semverIntersectError": {
      "title": "⚙️ Error: An internal error occurred while trying to intersect semver ranges: {range1} and {range2}.",
      "details": "  Error details: {error}",
      "solutions": [
        "  Possible solutions:",
        "    - This may indicate an issue with the semver parsing library or an extremely complex/unusual range combination.",
        "    - Please report this error along with the problematic version ranges if it persists."
      ]
    }
  },
  "info": {
    "determinedRangeMinMax": "✅ Determined compatible Node.js range: >={globalMin} <={globalMax}",
    "determinedRangeMinOnly": "✅ Determined compatible Node.js range: >={globalMin}",
    "determinedRangeMaxOnly": "✅ Determined compatible Node.js range: <={globalMax}",
    "noConstraintsFound": "ℹ️ No specific Node.js version constraints found in project or its direct dependencies.",
    "dependencyProcessed": "🔍 Processed dependency: {depName} (node engine: {nodeEngine}, min: {min}, max: {max})"
  }
}
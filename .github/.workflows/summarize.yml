name: Summarize Proposal

on:
  workflow_run:
    workflows:
      [
        "Lint Project",
        "Format Syntax",
        "PR Checks",
        "Security Scan",
        "PR Feedback",
      ]
    types: [completed]

permissions:
  contents: read
  pull-requests: write
  actions: read

jobs:
  summarize:
    name: Summarize PR Status
    if: github.event.workflow_run.conclusion != 'skipped'
    runs-on: ubuntu-latest
    steps:
      - name: Download workflow artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: ${{ github.event.workflow_run.name }}
          run_id: ${{ github.event.workflow_run.id }}
          name: pr-number
          path: ./artifacts

      - name: Get PR number
        id: pr_number
        run: |
          if [ -f "./artifacts/pr-number.txt" ]; then
            echo "PR_NUMBER=$(cat ./artifacts/pr-number.txt)" >> $GITHUB_ENV
            echo "::set-output name=has_pr::true"
          else
            echo "::set-output name=has_pr::false"
          fi

      - name: Setup GitHub CLI
        if: steps.pr_number.outputs.has_pr == 'true'
        run: |
          # Install GitHub CLI if not already installed
          if ! command -v gh &> /dev/null; then
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          fi

      - name: Generate GitHub PAT
        if: steps.pr_number.outputs.has_pr == 'true'
        id: generate_pat
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Login to GitHub using the GITHUB_TOKEN
          echo "$GH_TOKEN" | gh auth login --with-token

          # Set the GITHUB_TOKEN as GH_PAT for use in this workflow
          echo "GH_PAT=$GH_TOKEN" >> $GITHUB_ENV

      - name: Get workflow status
        if: steps.pr_number.outputs.has_pr == 'true'
        id: workflow_status
        run: |
          # Get workflow status
          WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
          WORKFLOW_STATUS="${{ github.event.workflow_run.conclusion }}"
          WORKFLOW_URL="${{ github.event.workflow_run.html_url }}"

          echo "WORKFLOW_NAME=$WORKFLOW_NAME" >> $GITHUB_ENV
          echo "WORKFLOW_STATUS=$WORKFLOW_STATUS" >> $GITHUB_ENV
          echo "WORKFLOW_URL=$WORKFLOW_URL" >> $GITHUB_ENV

          # Format status for display
          if [[ "$WORKFLOW_STATUS" == "success" ]]; then
            echo "STATUS_EMOJI=✅" >> $GITHUB_ENV
          elif [[ "$WORKFLOW_STATUS" == "failure" ]]; then
            echo "STATUS_EMOJI=❌" >> $GITHUB_ENV
          else
            echo "STATUS_EMOJI=⚠️" >> $GITHUB_ENV
          fi

      - name: Find existing summary comment
        if: steps.pr_number.outputs.has_pr == 'true'
        uses: peter-evans/find-comment@v3
        id: find_comment
        with:
          issue-number: ${{ env.PR_NUMBER }}
          comment-author: "github-actions[bot]"
          body-includes: PR Workflow Summary

      - name: Create or update PR summary comment
        if: steps.pr_number.outputs.has_pr == 'true'
        run: |
          # Create workflow summary update
          echo "## PR Workflow Summary" > summary.md
          echo "Last updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> summary.md
          echo "" >> summary.md
          echo "| Workflow | Status | Link |" >> summary.md
          echo "| -------- | ------ | ---- |" >> summary.md
          echo "| ${{ env.WORKFLOW_NAME }} | ${{ env.STATUS_EMOJI }} ${{ env.WORKFLOW_STATUS }} | [View details](${{ env.WORKFLOW_URL }}) |" >> summary.md

          # If comment exists, get its content and update it
          if [[ "${{ steps.find_comment.outputs.comment-id }}" != "" ]]; then
            # Get existing comment content
            COMMENT_CONTENT=$(gh api repos/${{ github.repository }}/issues/comments/${{ steps.find_comment.outputs.comment-id }} | jq -r .body)

            # Extract table from existing comment, excluding the header and first row (which we'll update)
            TABLE_CONTENT=$(echo "$COMMENT_CONTENT" | grep -A 100 "| Workflow | Status | Link |" | tail -n +3)

            # Check if this workflow is already in the table
            if echo "$TABLE_CONTENT" | grep -q "${{ env.WORKFLOW_NAME }}"; then
              # Update the existing workflow entry
              UPDATED_TABLE=$(echo "$TABLE_CONTENT" | sed "s/| ${{ env.WORKFLOW_NAME }} |.*|/| ${{ env.WORKFLOW_NAME }} | ${{ env.STATUS_EMOJI }} ${{ env.WORKFLOW_STATUS }} | [View details](${{ env.WORKFLOW_URL }}) |/")
            else
              # Add the new workflow entry at the top
              UPDATED_TABLE="| ${{ env.WORKFLOW_NAME }} | ${{ env.STATUS_EMOJI }} ${{ env.WORKFLOW_STATUS }} | [View details](${{ env.WORKFLOW_URL }}) |"$'\n'"$TABLE_CONTENT"
            fi

            # Recreate the summary with the updated table
            echo "## PR Workflow Summary" > summary.md
            echo "Last updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> summary.md
            echo "" >> summary.md
            echo "| Workflow | Status | Link |" >> summary.md
            echo "| -------- | ------ | ---- |" >> summary.md
            echo "$UPDATED_TABLE" >> summary.md
          fi

          # Update or create comment
          if [[ "${{ steps.find_comment.outputs.comment-id }}" != "" ]]; then
            gh api repos/${{ github.repository }}/issues/comments/${{ steps.find_comment.outputs.comment-id }} -X PATCH -f body="$(cat summary.md)"
          else
            gh pr comment ${{ env.PR_NUMBER }} --body-file summary.md
          fi
        env:
          GITHUB_TOKEN: ${{ env.GH_PAT }}

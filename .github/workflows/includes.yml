name: Update Prerequisites

on:
  schedule:
    # Run weekly on Sunday at 2:00 AM
    - cron: "0 2 * * 0"
  workflow_dispatch:
    inputs:
      dryRun:
        description: "Dry run (no PR creation)"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  update-dependencies:
    name: Check and Update Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check for outdated dependencies
        id: outdated
        run: |
          OUTDATED=$(npm outdated --json || echo '{}')
          echo "OUTDATED_COUNT=$(echo $OUTDATED | jq 'length')" >> $GITHUB_ENV
          echo "$OUTDATED" > outdated.json

          if [[ "$(echo $OUTDATED | jq 'length')" -gt 0 ]]; then
            echo "::set-output name=has_updates::true"
          else
            echo "::set-output name=has_updates::false"
          fi

      - name: Setup GitHub CLI
        if: steps.outdated.outputs.has_updates == 'true' && (github.event.inputs.dryRun != 'true')
        run: |
          # Install GitHub CLI if not already installed
          if ! command -v gh &> /dev/null; then
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          fi

      - name: Generate GitHub PAT
        if: steps.outdated.outputs.has_updates == 'true' && (github.event.inputs.dryRun != 'true')
        id: generate_pat
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Login to GitHub using the GITHUB_TOKEN
          echo "$GH_TOKEN" | gh auth login --with-token

          # Set the GITHUB_TOKEN as GH_PAT for use in this workflow
          echo "GH_PAT=$GH_TOKEN" >> $GITHUB_ENV

      - name: Generate update list
        if: steps.outdated.outputs.has_updates == 'true'
        id: update_list
        run: |
          echo "Generating update list..."

          # Create branch name with date stamp
          BRANCH_NAME="deps-update-$(date +'%Y%m%d')"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

          # Create PR title and description
          PR_TITLE="chore: update dependencies ($(date +'%Y-%m-%d'))"
          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV

          # Create detailed update list for PR description
          echo "## Dependency Updates" > updates.md
          echo "This PR updates the following dependencies:" >> updates.md
          echo "" >> updates.md
          echo "| Package | Current | Latest | Type |" >> updates.md
          echo "| ------- | ------- | ------ | ---- |" >> updates.md

          cat outdated.json | jq -r 'to_entries[] | "| \(.key) | \(.value.current) | \(.value.latest) | \(.value.type) |"' >> updates.md

          echo "" >> updates.md
          echo "This PR was automatically generated by the dependency update workflow." >> updates.md

      - name: Update dependencies
        if: steps.outdated.outputs.has_updates == 'true' && (github.event.inputs.dryRun != 'true')
        run: |
          # Create a new branch
          git checkout -b $BRANCH_NAME

          # Update dependencies
          npm update

          # Commit changes
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json package-lock.json
          git commit -m "$PR_TITLE"

          # Push changes
          git remote set-url origin https://x-access-token:${{ env.GH_PAT }}@github.com/${{ github.repository }}.git
          git push --set-upstream origin $BRANCH_NAME

      - name: Create PR
        if: steps.outdated.outputs.has_updates == 'true' && (github.event.inputs.dryRun != 'true')
        run: |
          # Create PR using GitHub CLI
          gh pr create \
            --title "$PR_TITLE" \
            --body-file updates.md \
            --base main \
            --head $BRANCH_NAME \
            --label "dependencies" \
            --label "automated pr"
        env:
          GITHUB_TOKEN: ${{ env.GH_PAT }}

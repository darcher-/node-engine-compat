name: Validate Workflows

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - dev
      - main

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  validate:
    name: Validate PR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Validate PR title
        id: validate_title
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"

          # Check if PR title follows conventional commits format
          if [[ ! $PR_TITLE =~ ^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\([a-z0-9-]+\))?: ]]; then
            echo "::set-output name=valid::false"
            echo "PR title doesn't follow conventional commits format. Example: 'feat: add new feature' or 'fix(scope): fix bug'"
          else
            echo "::set-output name=valid::true"
          fi

      - name: Validate branch name
        id: validate_branch
        run: |
          BRANCH_NAME="${{ github.head_ref }}"

          # Check if branch name follows the pattern feature/*, bugfix/*, hotfix/*, etc.
          if [[ ! $BRANCH_NAME =~ ^(feature|bugfix|hotfix|release|chore|docs|refactor|test)/[a-zA-Z0-9_-]+ ]]; then
            echo "::set-output name=valid::false"
            echo "Branch name doesn't follow naming convention. Example: 'feature/add-new-feature' or 'bugfix/fix-issue'"
          else
            echo "::set-output name=valid::true"
          fi

      - name: Check for PR description
        id: validate_description
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"

          if [[ -z "$PR_BODY" || "$PR_BODY" == *"<!-- Add description here -->"* ]]; then
            echo "::set-output name=valid::false"
            echo "PR description is empty or contains template placeholders."
          else
            echo "::set-output name=valid::true"
          fi

      - name: Setup GitHub CLI
        if: steps.validate_title.outputs.valid == 'false' || steps.validate_branch.outputs.valid == 'false' || steps.validate_description.outputs.valid == 'false'
        run: |
          # Install GitHub CLI if not already installed
          if ! command -v gh &> /dev/null; then
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          fi

      - name: Generate GitHub PAT
        if: steps.validate_title.outputs.valid == 'false' || steps.validate_branch.outputs.valid == 'false' || steps.validate_description.outputs.valid == 'false'
        id: generate_pat
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Login to GitHub using the GITHUB_TOKEN
          echo "$GH_TOKEN" | gh auth login --with-token

          # Set the GITHUB_TOKEN as GH_PAT for use in this workflow
          echo "GH_PAT=$GH_TOKEN" >> $GITHUB_ENV

      - name: Generate validation report
        if: steps.validate_title.outputs.valid == 'false' || steps.validate_branch.outputs.valid == 'false' || steps.validate_description.outputs.valid == 'false'
        run: |
          echo "## PR Validation Results" > validation-report.md
          echo "" >> validation-report.md

          if [[ "${{ steps.validate_title.outputs.valid }}" == "false" ]]; then
            echo "⚠️ **Invalid PR Title**" >> validation-report.md
            echo "Your PR title should follow the [Conventional Commits](https://www.conventionalcommits.org/) format:" >> validation-report.md
            echo "- `feat: add new feature`" >> validation-report.md
            echo "- `fix(scope): fix specific bug`" >> validation-report.md
            echo "- `docs: update README`" >> validation-report.md
            echo "" >> validation-report.md
          fi

          if [[ "${{ steps.validate_branch.outputs.valid }}" == "false" ]]; then
            echo "⚠️ **Invalid Branch Name**" >> validation-report.md
            echo "Your branch name should follow the pattern:" >> validation-report.md
            echo "- `feature/descriptive-name`" >> validation-report.md
            echo "- `bugfix/issue-description`" >> validation-report.md
            echo "- `hotfix/urgent-fix`" >> validation-report.md
            echo "- `docs/update-readme`" >> validation-report.md
            echo "" >> validation-report.md
          fi

          if [[ "${{ steps.validate_description.outputs.valid }}" == "false" ]]; then
            echo "⚠️ **Missing or Incomplete PR Description**" >> validation-report.md
            echo "Please add a meaningful description to your PR that explains:" >> validation-report.md
            echo "- What changes you've made" >> validation-report.md
            echo "- Why you've made these changes" >> validation-report.md
            echo "- Any related issues or context" >> validation-report.md
            echo "" >> validation-report.md
          fi

          echo "Please fix these issues to ensure your PR follows project conventions." >> validation-report.md

      - name: Find Comment
        if: steps.validate_title.outputs.valid == 'false' || steps.validate_branch.outputs.valid == 'false' || steps.validate_description.outputs.valid == 'false'
        uses: peter-evans/find-comment@v3
        id: find_comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: PR Validation Results

      - name: Add or update PR comment
        if: steps.validate_title.outputs.valid == 'false' || steps.validate_branch.outputs.valid == 'false' || steps.validate_description.outputs.valid == 'false'
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.find_comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body-file: validation-report.md
          edit-mode: replace

      - name: Label PR with issues
        if: steps.validate_title.outputs.valid == 'false' || steps.validate_branch.outputs.valid == 'false' || steps.validate_description.outputs.valid == 'false'
        run: |
          gh pr edit ${{ github.event.pull_request.number }} --add-label "needs-attention"
        env:
          GITHUB_TOKEN: ${{ env.GH_PAT }}
      - name: Setup GitHub CLI Authentication
        if: steps.validate_title.outputs.valid == 'false' || steps.validate_branch.outputs.valid == 'false' || steps.validate_description.outputs.valid == 'false'
        run: |
          # Clear GH_TOKEN from the environment
          unset GH_TOKEN

          # Install GitHub CLI if not already installed
          if ! command -v gh &> /dev/null; then
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --